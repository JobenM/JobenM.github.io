{"version":3,"sources":["static/react-logo.svg","static/gatsby.svg","static/graphql.svg","components/hero.js","components/components-page.js","components/technologies-page.js","components/contact-page.js","components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hero","className","src","reactIcon","alt","gatsbyIcon","graphqlIcon","ComponentsPage","TechnologiesPage","ContactsPage","NavBar","to","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,6QCqC5BC,EA9BF,WACT,OACI,6BACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,QACV,0BAAMA,UAAU,OAAhB,KADJ,WAEI,0BAAMA,UAAU,YAAhB,WAEJ,6BACI,wBAAIA,UAAU,cACV,0BAAMA,UAAU,UAAhB,uDACA,0BAAMA,UAAU,eAAhB,mFAKhB,yBAAKA,UAAU,iBACX,yBAAKC,IAAKC,IAAWF,UAAU,OAAOG,IAAI,gBAE9C,yBAAKH,UAAU,kBACX,yBAAKC,IAAKG,IAAYJ,UAAU,OAAOG,IAAI,iBAE/C,yBAAKH,UAAU,eACX,yBAAKC,IAAKI,IAAaL,UAAU,OAAOG,IAAI,oBCvB7CG,EANQ,WACnB,OACI,4CCIOC,EANU,WACrB,OACI,sCCIOC,EANM,WACjB,OACI,yCCcOC,G,MAXA,WACX,OACQ,yBAAKT,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,0BAA0BU,GAAG,KAA7C,QACA,kBAAC,IAAD,CAAMV,UAAU,0BAA0BU,GAAG,eAA7C,cACA,kBAAC,IAAD,CAAMV,UAAU,0BAA0BU,GAAG,iBAA7C,gBACA,kBAAC,IAAD,CAAMV,UAAU,wBAAwBU,GAAG,YAA3C,iBCkCDC,G,MAhCH,WACV,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,YAEf,kBAAC,IAAD,KACE,6BACA,kBAAC,EAAD,MACA,kBAAE,IAAF,KACI,kBAAC,IAAD,CAAOY,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,iBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,eCvBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3595153b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-logo.0691399b.svg\";","module.exports = __webpack_public_path__ + \"static/media/gatsby.2def7e70.svg\";","module.exports = __webpack_public_path__ + \"static/media/graphql.6270a2d4.svg\";","import React from 'react';\n\nimport './hero.css';\nimport reactIcon from '../static/react-logo.svg';\nimport gatsbyIcon from '../static/gatsby.svg';\nimport graphqlIcon from '../static/graphql.svg';\n\nconst Hero = () => {\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"content-wrapper\">\n                    <h2 className=\"name\">\n                        <span className=\"jay\">J</span>oe Milne\n                        <span className=\"location\">London</span>\n                    </h2>\n                    <div>\n                        <h1 className=\"home-title\">\n                            <span className=\"header\">A Frontend/Fullstack Developer of web applications.</span>\n                            <span className=\"sub-content\">\"I create web experiences for my users with quality and integrity in mind.\"</span>\n                        </h1>\n                    </div>\n                </div>\n            </div>\n            <div className=\"react-wrapper\">\n                <img src={reactIcon} className=\"logo\" alt=\"react-logo\" />\n            </div>\n            <div className=\"gatsby-wrapper\">\n                <img src={gatsbyIcon} className=\"logo\" alt=\"gastby-logo\" />\n            </div>\n            <div className=\"gql-wrapper\">\n                <img src={graphqlIcon} className=\"logo\" alt=\"graphql-logo\" />\n            </div>\n        </div>\n    )\n}\n\nexport default Hero;","import React from 'react';\n\nconst ComponentsPage = () => {\n    return (\n        <div>components</div>\n    )\n}\n\nexport default ComponentsPage;","import React from 'react';\n\nconst TechnologiesPage = () => {\n    return (\n        <div>Tech</div>\n    )\n}\n\nexport default TechnologiesPage;","import React from 'react';\n\nconst ContactsPage = () => {\n    return (\n        <div>Contact</div>\n    )\n}\n\nexport default ContactsPage;","import React from 'react';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nimport './navigation.css';\n\nconst NavBar = () => {\n    return (\n            <nav className=\"nav-container\">\n                <Link className=\"button secondary-button\" to=\"/\">Home</Link>\n                <Link className=\"button secondary-button\" to=\"/components\">Components</Link>\n                <Link className=\"button secondary-button\" to=\"/technologies\">Technologies</Link>\n                <Link className=\"button primary-button\" to=\"/contact\">Contact me</Link>\n            </nav>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Hero from './components/hero'\nimport ComponentsPage from './components/components-page'\nimport TechnologiesPage from './components/technologies-page'\nimport ContactsPage from './components/contact-page'\nimport NavBar from './components/navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"overflow\">\n          \n        <Router>\n          <div>\n          <NavBar/>\n          < Switch>\n              <Route path=\"/components\">\n                <ComponentsPage />\n              </Route>\n              <Route path=\"/technologies\">\n                <TechnologiesPage />\n              </Route>\n              <Route path=\"/contact\">\n                <ContactsPage />\n              </Route>\n              <Route path=\"/\">\n                <Hero/>\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}