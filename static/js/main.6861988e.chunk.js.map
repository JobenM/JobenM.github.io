{"version":3,"sources":["static/doggy.png","static/fonts/Quicksand-Light.ttf","components/nav.js","pages/home.js","pages/intro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","style","opacity","ref","anime","targets","delay","duration","easing","href","rel","target","content","Home","Intro","console","log","running","scale","BASE_ANIMATION_TIMING","transform","translateX","translateY","App","background","useRef","scene","THREE","camera","window","innerWidth","innerHeight","useEffect","renderer","setPixelRatio","devicePixelRatio","setSize","document","body","appendChild","domElement","geometry","material","color","sphere","add","pointLight","pointLight2","position","set","z","x","y","marvinLoader","load","animate","requestAnimationFrame","rotation","render","src","doggy","alt","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6861988e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/doggy.c4ef102a.png\";","module.exports = __webpack_public_path__ + \"static/media/Quicksand-Light.10ce81d2.ttf\";","import React from \"react\";\nimport anime from 'animejs';\n\nimport './nav.css';\n\nconst Nav = () => <nav className='nav-container' style={{ opacity: 0 }} ref={(ref) => {\n    anime({\n        targets: ref,\n        delay: 4500,\n        opacity: 1,\n        duration: 1000,\n        easing: 'easeInOutSine'\n    })\n}}>\n    <a className=\"nav-container-link\"\n        href=\"https://www.linkedin.com/in/joseph-milne-968b92110/\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\">LinkedIn</a>\n    <a className=\"nav-container-link\"\n        href=\"https://github.com/JobenM\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\">Github</a>\n</nav>\n\nexport default Nav;\n","import React from 'react';\nimport anime from 'animejs';\n\nimport './home.css';\n\nconst content = {\n  header: \"Hello my name is Joe! I'm a experienced Frontend/ Fullstack Developer of web applications.\",\n  body: \"I create scalable web experiences for my users with quality and integrity in mind.\",\n}\n\nconst Home = () => (\n  <>\n    <div className=\"container\">\n      <div className=\"content-wrapper\">\n        <div>\n          <h1 className=\"home-title\" style={{ opacity: 0 }} ref={(ref) => {\n            anime({\n              targets: ref,\n              delay: 4000,\n              opacity: 1,\n              duration: 1000,\n              easing: 'easeInOutSine'\n            })\n          }} >\n            <span className=\"header\">{content.header}</span>\n            <span className=\"sub-content\">\n              {content.body}\n            </span>\n          </h1>\n        </div>\n      </div>\n    </div>\n  </>\n)\n\n\nexport default Home;\n","import React from 'react';\nimport anime from 'animejs'\n\nimport './intro.css';\n\nconst BASE_ANIMATION_TIMING = 1500;\n\nconst Intro = () => {\n    console.log(anime.running)\n    return (\n        <div className='intro-container' style={{ opacity: 1, scale: 1 }} ref={(ref) => {\n            anime({\n                targets: ref,\n                delay: BASE_ANIMATION_TIMING * 2,\n                opacity: 0,\n                duration: BASE_ANIMATION_TIMING,\n                easing: 'easeInOutSine'\n            })\n            anime({\n                targets: ref,\n                scale: 0,\n                delay: BASE_ANIMATION_TIMING * 2.5,\n                duration: BASE_ANIMATION_TIMING,\n                easing: 'easeInOutSine'\n            })\n        }}>\n            <span style={{ transform: 'translateX(0)' }}\n                ref={(ref) => anime({\n                    targets: ref,\n                    translateX: '-2000px',\n                    delay: BASE_ANIMATION_TIMING * 0.8,\n                    duration: BASE_ANIMATION_TIMING,\n                    easing: 'easeInOutSine'\n                })}>Learn</span>\n            <span\n                style={{ transform: 'translateY(0)' }}\n                ref={(ref) => anime({\n                    targets: ref,\n                    translateY: '-2000px',\n                    delay: BASE_ANIMATION_TIMING * 1.25,\n                    duration: BASE_ANIMATION_TIMING,\n                    easing: 'easeInOutSine'\n                })}>Progress</span>\n            <span\n                style={{ transform: 'translateX(0)' }}\n                ref={(ref) => anime({\n                    targets: ref,\n                    translateX: '2000px',\n                    delay: BASE_ANIMATION_TIMING * 1.5,\n                    duration: BASE_ANIMATION_TIMING,\n                    easing: 'easeInOutSine'\n                })}>Innovate</span>\n        </div>\n    );\n};\n\nexport default Intro;","import React, { useEffect, useRef } from 'react';\nimport anime from 'animejs'\nimport * as THREE from 'three';\n\nimport Nav from './components/nav';\nimport Home from './pages/home';\nimport Intro from './pages/intro';\nimport doggy from './static/doggy.png'\n\nimport './common.css';\n\nconst App = () => {\n  const background = useRef(null);\n\n  const scene = new THREE.Scene();\n\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n  useEffect(() => {\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    var geometry = new THREE.TorusGeometry(2, 1, 36, 100);\n    var material = new THREE.MeshStandardMaterial({ color: 0xffc0cb });\n    var sphere = new THREE.Mesh(geometry, material);\n    scene.add(sphere);\n\n    const pointLight = new THREE.PointLight(0xffffff)\n    const pointLight2 = new THREE.PointLight(0xffffff)\n\n    pointLight.position.set(10, 10, 10)\n    pointLight2.position.set(-1, -1, -1)\n    scene.add(pointLight);\n    scene.add(pointLight2);\n    camera.position.z = 15;\n    sphere.position.x = 5;\n    sphere.position.y = 6;\n\n    const marvinLoader = new THREE.TextureLoader().load('./static/doggy.png')\n\n    scene.background = marvinLoader\n    var animate = function () {\n      requestAnimationFrame(animate);\n      sphere.rotation.x += 0.009;\n      sphere.rotation.y += 0.003;\n      sphere.rotation.z += 0.01;\n\n      renderer.render(scene, camera);\n    };\n    animate();\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\" ref={background}>\n        <div className=\"layout\">\n          <Intro />\n          <Home />\n          <Nav />\n          <img\n            className='doggy'\n            src={doggy}\n            alt='marvin'\n          />\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/fonts/Quicksand-Light.ttf';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}