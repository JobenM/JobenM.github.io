{"version":3,"sources":["static/react-logo.svg","static/gatsby.svg","static/graphql.svg","static/aws.svg","static/css.svg","static/cypress-io.svg","static/express.svg","static/javascript.svg","static/jest.svg","static/nodejs.svg","static/redux.svg","static/react-query.svg","static/eslint.svg","static/github.svg","static/mongodb.svg","static/typescript.svg","static/next-js.svg","components/card.js","lib/tech-data.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","description","logo","className","src","key","alt","awsIcon","reactIcon","gatsbyIcon","reactQuery","typescript","javascriptIcon","nodeIcon","graphqlIcon","cypressIcon","expressIcon","next","jestIcon","cssIcon","eslintIcon","githubIcon","reduxIcon","mongodbIcon","Home","techList","map","data","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a1d4fad7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-logo.0691399b.svg\";","module.exports = __webpack_public_path__ + \"static/media/gatsby.2def7e70.svg\";","module.exports = __webpack_public_path__ + \"static/media/graphql.6270a2d4.svg\";","module.exports = __webpack_public_path__ + \"static/media/aws.e9791afa.svg\";","module.exports = __webpack_public_path__ + \"static/media/css.6120f0fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/cypress-io.871f3555.svg\";","module.exports = __webpack_public_path__ + \"static/media/express.f5560e5b.svg\";","module.exports = __webpack_public_path__ + \"static/media/javascript.e2aaaa2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/jest.40ff828e.svg\";","module.exports = __webpack_public_path__ + \"static/media/nodejs.ddee5660.svg\";","module.exports = __webpack_public_path__ + \"static/media/redux.cd139abc.svg\";","module.exports = __webpack_public_path__ + \"static/media/react-query.60a42585.svg\";","module.exports = __webpack_public_path__ + \"static/media/eslint.484ca6fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/mongodb.c2a864c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/typescript.3aeee229.svg\";","module.exports = __webpack_public_path__ + \"static/media/next-js.b5d25ca3.svg\";","import React from 'react';\n\nimport './card.css';\n\nconst Card = ({ name, description, logo }) => (\n    <div className=\"tech-card\">\n        <div className=\"tech-card-inner\">\n            <div className=\"tech-card-front\">\n                <img src={logo} className=\"tech-icon\" key={`key-${name}`} alt={name} />\n            </div>\n            <div className=\"tech-card-back\">\n                <div className=\"card-title\">{name}</div>\n                <div className=\"card-description\">{description}</div>\n            </div>\n        </div>\n    </div>\n);\nexport default Card;\n","import reactIcon from '../static/react-logo.svg';\nimport gatsbyIcon from '../static/gatsby.svg';\nimport graphqlIcon from '../static/graphql.svg';\nimport awsIcon from '../static/aws.svg';\nimport cssIcon from '../static/css.svg';\nimport cypressIcon from '../static/cypress-io.svg';\nimport expressIcon from '../static/express.svg';\nimport javascriptIcon from '../static/javascript.svg';\nimport jestIcon from '../static/jest.svg';\nimport nodeIcon from '../static/nodejs.svg';\nimport reduxIcon from '../static/redux.svg';\nimport reactQuery from '../static/react-query.svg';\nimport eslintIcon from '../static/eslint.svg';\nimport githubIcon from '../static/github.svg';\nimport mongodbIcon from '../static/mongodb.svg';\nimport typescript from '../static/typescript.svg';\nimport next from '../static/next-js.svg';\n\nexport default [\n  {\n    name: 'Amazon Web Service',\n    logo: awsIcon,\n    description:\n      \"AWS is a massive cloud computing service. You'd need a whole life time to master but I've worked with a multitude of features. S3, EC2s hosting different types of web applications. Lambdas!\",\n  },\n  {\n    name: 'React',\n    logo: reactIcon,\n    description:\n      'My Javascript library for building UIs of choice. I worked with React extensively and still enjoy using it regularly.',\n  },\n  {\n    name: 'Gatsby',\n    logo: gatsbyIcon,\n    description:\n      'React-based open-source framework for creating websites and apps. Really enjoyed using gatsby and integrating it with GraphQL, to create a CMS.',\n  },\n  {\n    name: 'React Query',\n    logo: reactQuery,\n    description:\n      'Performant and powerful data synchronization for React. I did the migration from redux to useQuery and mutations for our api requests. Some powerful stuff.',\n  },\n  {\n    name: 'Typescript',\n    logo: typescript,\n    description:\n      \"Typescript is syntactic sugar for making JS strongly typed and it's awesome! So many bugs avoided. I was heavily involved in migrating our tech stack onto ts.\",\n  },\n  {\n    name: 'ES6',\n    logo: javascriptIcon,\n    description:\n      \"I'm up to date with the latest and greatest in terms of JS and syntax. Writing clean readable code using the latest syntax is my jam!\",\n  },\n  {\n    name: 'NodeJS',\n    logo: nodeIcon,\n    description:\n      \"An open-source, cross-platform, back-end JavaScript runtime environment outside the browser. I love writing in node, it's where I was first exposed to JS, whether it's writing tests or server side code.\",\n  },\n  {\n    name: 'Graphql',\n    logo: graphqlIcon,\n    description:\n      'Data query and manipulation language for APIs. I used GQL to build a CMS that queried the exact data required to build the page. Really cool integration with Gatsby.',\n  },\n  {\n    name: 'Cypress',\n    logo: cypressIcon,\n    description:\n      \"Automated browser testing framework. It's the latest and greatest in the word of E2E testing. Powerful debugging and test recordings.\",\n  },\n  {\n    name: 'ExpressJS',\n    logo: expressIcon,\n    description:\n      'A minimal and flexible backend Node.js web application framework. This is my go to for quick speedy personal projects that require a backend.',\n  },\n  {\n    name: 'NextJS',\n    logo: next,\n    description:\n      'Another minimal and flexible backend Node.js web application framework. This is my go to for quick speedy personal projects that require a backend.',\n  },\n  {\n    name: 'Jest',\n    logo: jestIcon,\n    description:\n      'A JavaScript testing framework with a focus on simplicity. I aim for around 95%+ unit testing coverage of both isolated and integrated components.',\n  },\n  {\n    name: 'CSS',\n    logo: cssIcon,\n    description:\n      'Web application styling. Love how light weight css can be in the right hands, using both CSS in JS and modular. The real power of a beautiful + professional site.',\n  },\n  {\n    name: 'ESLint',\n    logo: eslintIcon,\n    description:\n      'A pluggable and configurable linter tool for maintaining code quality. Clean code is certainly your friend in an organisation and frankly anywhere, so a good linter configured to your spec is essential.',\n  },\n  {\n    name: 'Github',\n    logo: githubIcon,\n    description:\n      'Used for hosting this site. As well as deploying, testing and linting with github actions. A great offering from microsoft, would you believe!',\n  },\n  {\n    name: 'Redux',\n    logo: reduxIcon,\n    description:\n      \"Redux is an open-source JavaScript library for managing application state. You either love it or hate, but I've used it for heavily for dispatching api requests and storing resulting data.\",\n  },\n  {\n    name: 'MongoDB',\n    logo: mongodbIcon,\n    description:\n      'MongoDB is a document database with the scalability and flexibility. Super cool how much allocation you can get for free with mongo atlas.',\n  },\n];\n","import React, { Fragment } from 'react';\n\nimport Card from '../components/card'\nimport techList from '../lib/tech-data';\nimport reactIcon from '../static/react-logo.svg';\nimport gatsbyIcon from '../static/gatsby.svg';\nimport graphqlIcon from '../static/graphql.svg';\nimport './home.css';\n\nconst Home = () => (\n  <Fragment>\n    <div className=\"container\">\n      <div className=\"content-wrapper\">\n        <div>\n          <h1 className=\"home-title\">\n            <span className=\"header\">A Frontend/Fullstack Developer of web applications.</span>\n            <span className=\"sub-content\">\n              \"I create scalable web experiences for my users with quality and integrity in mind.\"\n            </span>\n          </h1>\n        </div>\n      </div>\n      <div className=\"card-group\">\n        <ul className=\"wrapper\">\n          {techList.map((data) => (\n            <li>\n              <Card {...data} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  </Fragment>\n);\n\nexport default Home;\n","import React from 'react';\n\nimport Home from './pages/home';\nimport './common.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <div className=\"hero-overflow\">\n        <Home />\n      </div>\n    </header>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}