{"version":3,"sources":["static/react-logo.svg","static/gatsby.svg","static/graphql.svg","static/green-checkmark.svg","static/red-x.svg","pages/hero.js","pages/components-page.js","pages/technologies-page.js","components/input.js","components/notification.js","pages/contact-page.js","components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hero","className","src","reactIcon","alt","gatsbyIcon","graphqlIcon","ComponentsPage","TechnologiesPage","Input","placeholder","label","onChange","value","isRequired","defaultProps","Notification","isSent","messageText","greenCheckIcon","redCheckIcon","undefined","ContactsPage","useState","templateParams","setTemplateParams","isDisabled","messageSubmitted","message","replyEmail","name","e","target","phoneNumber","disabled","type","onClick","preventDefault","emailjs","send","then","messageFailed","NavBar","to","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.de293215.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-logo.0691399b.svg\";","module.exports = __webpack_public_path__ + \"static/media/gatsby.2def7e70.svg\";","module.exports = __webpack_public_path__ + \"static/media/graphql.6270a2d4.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-checkmark.5a013bad.svg\";","module.exports = __webpack_public_path__ + \"static/media/red-x.c33c3a33.svg\";","import React from 'react';\n\nimport './hero.css';\nimport reactIcon from '../static/react-logo.svg';\nimport gatsbyIcon from '../static/gatsby.svg';\nimport graphqlIcon from '../static/graphql.svg';\n\nconst Hero = () => (\n  <div>\n    <div className=\"container\">\n      <div className=\"content-wrapper\">\n        <h2 className=\"name\">\n          <span className=\"jay\">J</span>\n          oe Milne\n          <span className=\"location\">London</span>\n        </h2>\n        <div>\n          <h1 className=\"home-title\">\n            <span className=\"header\">A Frontend/Fullstack Developer of web applications.</span>\n            <span className=\"sub-content\">\n              \"I create scalable web experiences for my users with quality and integrity in mind.\"\n            </span>\n          </h1>\n        </div>\n      </div>\n    </div>\n    <div className=\"react-wrapper\">\n      <img src={reactIcon} className=\"logo\" alt=\"react-logo\" />\n    </div>\n    <div className=\"gatsby-wrapper\">\n      <img src={gatsbyIcon} className=\"logo\" alt=\"gastby-logo\" />\n    </div>\n    <div className=\"gql-wrapper\">\n      <img src={graphqlIcon} className=\"logo\" alt=\"graphql-logo\" />\n    </div>\n  </div>\n);\n\nexport default Hero;\n","import React from 'react';\n\nconst ComponentsPage = () => <div>components</div>;\n\nexport default ComponentsPage;\n","import React from 'react';\n\nconst TechnologiesPage = () => <div>Tech</div>;\n\nexport default TechnologiesPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './input.css';\n\nconst Input = ({ placeholder, label, onChange, value, isRequired }) => (\n  <div className=\"input-wrapper\">\n    <div>\n      <span>{label}</span>\n      <span>{isRequired ? <span className=\"required\">*</span> : null}</span>\n    </div>\n    <input placeholder={placeholder} value={value} onChange={onChange} />\n  </div>\n);\n\nInput.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  isRequired: false,\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport greenCheckIcon from '../static/green-checkmark.svg';\nimport redCheckIcon from '../static/red-x.svg';\nimport './notification.css';\n\nconst Notification = ({ isSent }) => {\n  const messageText = isSent ? 'Message sent!' : 'Oops not sent!';\n  return (\n    <div className=\"notification\">\n      <div className=\"model-background\"></div>\n      <div className=\"model-card\">\n        {messageText}\n        <img className=\"check-svg\" src={isSent ? greenCheckIcon : redCheckIcon} alt=\"sent-status\" />\n      </div>\n    </div>\n  );\n};\n\nNotification.propTypes = {\n  messageText: PropTypes.string.isRequired,\n  isSent: PropTypes.bool,\n};\n\nNotification.defaultProps = {\n  isSent: undefined,\n};\n\nexport default Notification;\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport emailjs from 'emailjs-com';\n\nimport Input from '../components/input';\nimport Notification from '../components/notification';\nimport './contact-page.css';\n\nconst ContactsPage = () => {\n  const [templateParams, setTemplateParams] = useState({});\n\n  const handleEmailSumbit = (e) => {\n    e.preventDefault();\n\n    emailjs.send('service_gj6kb6n', 'template_9w5bbdt', templateParams, 'user_Gvy5EFerJiygU2R0klfg4').then(\n      () => {\n        setTemplateParams({ messageSubmitted: true });\n      },\n      () => {\n        setTemplateParams({ messageFailed: true });\n      },\n    );\n  };\n\n  const isDisabled = templateParams.messageSubmitted || !templateParams.message || !templateParams.replyEmail;\n\n  return (\n    <div>\n      <form className=\"form\" name=\"Contact Form\">\n        <h1 className=\"contact-header \">Contact me</h1>\n        <fieldset className=\"fields\">\n          <Input\n            label=\"Name\"\n            placeholder=\"Enter your name...\"\n            value={templateParams.name}\n            onChange={(e) => setTemplateParams({ ...templateParams, name: e.target.value })}\n          />\n          <br />\n          <Input\n            label=\"Phone Number\"\n            placeholder=\"Enter your phone number...\"\n            value={templateParams.phoneNumber}\n            onChange={(e) => setTemplateParams({ ...templateParams, phoneNumber: e.target.value })}\n          />\n          <br />\n          <Input\n            isRequired={true}\n            label=\"Email\"\n            placeholder=\"Enter your email...\"\n            value={templateParams.replyEmail}\n            onChange={(e) => setTemplateParams({ ...templateParams, replyEmail: e.target.value })}\n          />\n          <br />\n          <div className=\"input-wrapper\">\n            Message<span className=\"required\">*</span>\n            <textarea\n              className=\"message\"\n              placeholder=\"Enter a message...\"\n              value={templateParams.message}\n              onChange={(e) => setTemplateParams({ ...templateParams, message: e.target.value })}\n            />\n          </div>\n          <br />\n          <div className=\"button-wrapper\">\n            <button\n              disabled={isDisabled}\n              className={`${isDisabled ? 'button-disabled' : 'primary-button'} button send`}\n              type=\"submit\"\n              onClick={handleEmailSumbit}\n              value=\"Submit\"\n            >\n              Send\n            </button>\n            {isDisabled ? <span className=\"required\">(complete required fields)</span> : null}\n          </div>\n        </fieldset>\n      </form>\n      {templateParams.messageSubmitted || templateParams.messageFailed ? (\n        <Notification isSent={templateParams.messageSubmitted} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './navigation.css';\n\nconst NavBar = () => (\n  <nav className=\"nav-container\">\n    <div className=\"nav-links\">\n      <Link className=\"button secondary-button\" to=\"/\">\n        Home\n      </Link>\n      <Link className=\"button secondary-button\" to=\"/components\">\n        Components\n      </Link>\n      <Link className=\"button secondary-button\" to=\"/technologies\">\n        Technologies\n      </Link>\n      <Link className=\"button primary-button\" to=\"/contact\">\n        Contact me\n      </Link>\n    </div>\n  </nav>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Hero from './pages/hero';\nimport ComponentsPage from './pages/components-page';\nimport TechnologiesPage from './pages/technologies-page';\nimport ContactsPage from './pages/contact-page';\nimport NavBar from './components/navigation';\nimport './common.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <Router>\n        <div>\n          <Switch>\n            <Route path=\"/components\">\n              <NavBar />\n              <ComponentsPage />\n            </Route>\n            <Route path=\"/technologies\">\n              <NavBar />\n              <TechnologiesPage />\n            </Route>\n            <Route path=\"/contact\">\n              <div className=\"overflow-contact\">\n                <NavBar />\n                <ContactsPage />\n              </div>\n            </Route>\n            <Route path=\"/\">\n              <div className=\"hero-overflow\">\n                <NavBar />\n                <Hero />\n              </div>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </header>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}